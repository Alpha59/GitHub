#!/usr/bin/env python3
import sys, os
sys.path.append(os.getcwd())
"""
feat
desc = "Creates a new Feature Branch off of the dev branch. Feature branches will be merged back into dev. FB- prefix"
    parser.add_argument('name', type=str,help="The name of the feature branch to be created, normally this is a numeric code associated with a ticket number.")
"""

"""
hf
desc = "Creates a Hot Fix branch from the release, this branch will be merged back into release and dev, conflicts must be resolved on both branches before merging. "
    parser.add_argument('name', type=str,help="The name of the Hot Fix branch, normally this is an issue number")
"""

"""
hfqa
desc = "Creates a Hot Fix branch from the QA Branch. This branch will be merged back into QA and Dev. This type of branch is for small fixes to resolve a QA issue. The QA Branch should go live immediately."
    parser.add_argument('name', type=str,help="Name of the QA Hot Fix. This is normally the original issue number appened with -[a-z]")
"""

"""
qa
desc = "Creates a branch that QA can use to test feat branches specifically."
    parser.add_argument('name', type=str,help="Name of the QA Hot Fix. This is normally the original issue number appened with -[a-z]")
"""

"""
script
desc = "Creates a new scripting branch and runs the appropriate script against it. If the script fails- the branch is stashed. If you are already on the scripting branch, then you stay on this branch"
    parser.add_argument('f', nargs='?', type=str,help="The file to execute on the cwd")
    parser.add_argument('-e', '--execute', type=str,help="The command to execute on the cwd")
"""
desc = "Creates a new branch of the specified type by branching off of the appropriate branch"
def args_adder(parser):
    parser.add_argument('branchType', help="The type of doing to do", choices=['s', 'qa', 'hfqa', 'hf', 'feat'])
    parser.add_argument('name', help="The name of the branch")
    parser.add_argument('f', nargs='?', type=str,help="The file to execute on the cwd")
    parser.add_argument('-e', '--execute', type=str,help="The command to execute on the cwd")
    parser.add_argument('-n', '--nodev', action='store_true',help="Do not switch to dev branch first")


def run(branchType, name, f=None, execute="", nodev=False, verbose=False):
    import gitCommands as git
    if not nodev :
        git.save("Saved to switch branches")
        git.branch("dev")
    git.branch(branchType + "-" + name)
    if branchType == "s" :
        if not f is None:
            verbose("Running script from file")
        if not execute is "" :
            verbose("Running script from cli")
    return branchType + "-" + name

def console(output, verbose):
    print(output)

#########################################################################
# Boiler plate code to create a new module / command line module to be used.
#########################################################################
import boilerplate
boilerplate.create(__name__, desc, args_adder, run, console)
